---
version: '1.0'
stages:
  - "clone"
  - "bump_version"
  - "push_tag"
steps:
  clone_repo:
    title: "Cloning repository"
    type: "git-clone"
    repo: "${{CF_REPO_NAME}}"
    revision: "${{CF_BRANCH}}"
    stage: "clone"
  detect_last_tag:
    title: "Detecting last tag"
    type: "freestyle"
    image: "alpine/git"
    stage: "bump_version"
    commands:
      - |
        LAST_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
        echo "Last tag detected: $LAST_TAG"
        echo "LAST_TAG=$LAST_TAG" >> $CF_VOLUME_PATH/env_vars_to_export    volumes:
      - name: env_vars_to_export
        path: /codefresh/volume/env_vars_to_export
  determine_new_version:
    title: "Determining new version"
    type: "freestyle"
    image: "alpine/git"
    stage: "bump_version"
    commands:
      - source $CF_VOLUME_PATH/env_vars_to_export
      - LAST_TAG=$(echo $LAST_TAG)
      - IFS='.' read -r -a VERSION <<< "$LAST_TAG"
      - MAJOR=${VERSION[0]}
      - MINOR=${VERSION[1]}
      - PATCH=${VERSION[2]}
      - echo "Detected PR message: $CF_PULL_REQUEST_DESCRIPTION"
      - if echo "$CF_PULL_REQUEST_DESCRIPTION" | grep -q "#major"; then
          MAJOR=$((MAJOR + 1));
          MINOR=0;
          PATCH=0;
        elif echo "$CF_PULL_REQUEST_DESCRIPTION" | grep -q "#minor"; then
          MINOR=$((MINOR + 1));
          PATCH=0;
        else
          PATCH=$((PATCH + 1));
        fi
      - NEW_TAG="$MAJOR.$MINOR.$PATCH"
      - echo "New tag: $NEW_TAG"
      - echo "NEW_TAG=$NEW_TAG" >> $CF_VOLUME_PATH/env_vars_to_export    volumes:
      - name: env_vars_to_export
        path: /codefresh/volume/env_vars_to_export
  tag_and_push:
    title: "Tagging and pushing to repository"
    type: "freestyle"
    image: "alpine/git"
    stage: "push_tag"
    commands:
      - source $CF_VOLUME_PATH/env_vars_to_export
      - NEW_TAG=$(echo $NEW_TAG)
      - git tag $NEW_TAG
      - git push origin $NEW_TAG
